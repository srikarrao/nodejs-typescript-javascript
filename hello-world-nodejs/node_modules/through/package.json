{
  "_args": [
    [
      {
        "raw": "through@0.0.4",
        "scope": null,
        "escapedName": "through",
        "name": "through",
        "rawSpec": "0.0.4",
        "spec": "0.0.4",
        "type": "version"
      },
      "C:\\Users\\SrikarRao\\Documents\\GitHub\\nodejs-typescript-javascript\\hello-world-nodejs\\node_modules\\event-stream"
    ]
  ],
  "_from": "through@0.0.4",
  "_id": "through@0.0.4",
  "_inCache": true,
  "_location": "/through",
  "_phantomChildren": {},
  "_requested": {
    "raw": "through@0.0.4",
    "scope": null,
    "escapedName": "through",
    "name": "through",
    "rawSpec": "0.0.4",
    "spec": "0.0.4",
    "type": "version"
  },
  "_requiredBy": [
    "/event-stream"
  ],
  "_resolved": "https://registry.npmjs.org/through/-/through-0.0.4.tgz",
  "_shasum": "0bf2f0fffafaac4bacbc533667e98aad00b588c8",
  "_shrinkwrap": null,
  "_spec": "through@0.0.4",
  "_where": "C:\\Users\\SrikarRao\\Documents\\GitHub\\nodejs-typescript-javascript\\hello-world-nodejs\\node_modules\\event-stream",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "dominictarr.com"
  },
  "dependencies": {},
  "description": "simplified stream contruction",
  "devDependencies": {
    "assertions": "2",
    "asynct": "1",
    "stream-spec": "0"
  },
  "directories": {},
  "dist": {
    "shasum": "0bf2f0fffafaac4bacbc533667e98aad00b588c8",
    "tarball": "https://registry.npmjs.org/through/-/through-0.0.4.tgz"
  },
  "keywords": [
    "stream",
    "streams",
    "user-streams",
    "pipe"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "through",
  "optionalDependencies": {},
  "readme": "#through\n\n[![build status](https://secure.travis-ci.org/dominictarr/through.png)](http://travis-ci.org/dominictarr/through)\n\nEasy way to create a `Stream` that is both `readable` and `writable`. Pass in optional `write` and `end` methods. `through` takes care of pause/resume logic.\nUse `this.pause()` and `this.resume()` to manage flow.\nCheck `this.paused` to see current flow state. (write always returns `!this.paused`)\n\nthis function is the basis for most of the syncronous streams in [event-stream](http://github.com/dominictarr/event-stream).\n\n``` js\nvar through = require('through')\n\nthrough(function write(data) {\n    this.emit('data', data)\n    //this.pause() \n  },\n  function end () { //optional\n    this.emit('end')\n  })\n\n```\n\n## License\n\nMIT / Apache2\n",
  "readmeFilename": "readme.markdown",
  "scripts": {
    "test": "asynct test/*.js"
  },
  "version": "0.0.4"
}
