{
  "_args": [
    [
      {
        "raw": "csproj2ts@^0.0.8",
        "scope": null,
        "escapedName": "csproj2ts",
        "name": "csproj2ts",
        "rawSpec": "^0.0.8",
        "spec": ">=0.0.8 <0.0.9",
        "type": "range"
      },
      "C:\\Users\\SrikarRao\\Documents\\GitHub\\typescript-express\\node_modules\\grunt-ts"
    ]
  ],
  "_from": "csproj2ts@>=0.0.8 <0.0.9",
  "_id": "csproj2ts@0.0.8",
  "_inCache": true,
  "_location": "/csproj2ts",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/csproj2ts-0.0.8.tgz_1483484106008_0.33798038004897535"
  },
  "_npmUser": {
    "name": "nycdotnet",
    "email": "steve.ognibene@outlook.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "csproj2ts@^0.0.8",
    "scope": null,
    "escapedName": "csproj2ts",
    "name": "csproj2ts",
    "rawSpec": "^0.0.8",
    "spec": ">=0.0.8 <0.0.9",
    "type": "range"
  },
  "_requiredBy": [
    "/grunt-ts"
  ],
  "_resolved": "https://registry.npmjs.org/csproj2ts/-/csproj2ts-0.0.8.tgz",
  "_shasum": "9d1c719e20c42cce8c4de29008efc35549fd126f",
  "_shrinkwrap": null,
  "_spec": "csproj2ts@^0.0.8",
  "_where": "C:\\Users\\SrikarRao\\Documents\\GitHub\\typescript-express\\node_modules\\grunt-ts",
  "author": {
    "name": "Steve Ognibene"
  },
  "bugs": {
    "url": "https://github.com/TypeStrong/csproj2ts/issues"
  },
  "dependencies": {
    "es6-promise": "^4.0.5",
    "lodash": "^4.17.4",
    "semver": "^5.3.0",
    "xml2js": "^0.4.17"
  },
  "description": "Library to parse TypeScript config info from a Visual Studio Project file",
  "devDependencies": {
    "grunt": "^1.0.1",
    "grunt-contrib-nodeunit": "^1.0.0",
    "grunt-run": "^0.6.0",
    "grunt-ts": "^4.2.0",
    "typescript": "^2.1.4"
  },
  "directories": {},
  "dist": {
    "shasum": "9d1c719e20c42cce8c4de29008efc35549fd126f",
    "tarball": "https://registry.npmjs.org/csproj2ts/-/csproj2ts-0.0.8.tgz"
  },
  "gitHead": "656b4c29dd0e71907c9c5eb59925b3b2fe07015e",
  "homepage": "https://github.com/TypeStrong/csproj2ts",
  "keywords": [
    "typescript",
    "tsc",
    "visual",
    "studio",
    "csproj",
    "vbproj"
  ],
  "license": "MIT",
  "main": "csproj2ts.js",
  "maintainers": [
    {
      "name": "nycdotnet",
      "email": "steve.ognibene@outlook.com"
    }
  ],
  "name": "csproj2ts",
  "optionalDependencies": {},
  "readme": "ï»¿# csproj2ts\r\n\r\nQueries a Visual Studio project file (.csproj, .vbproj, .njsproj, etc.) for TypeScript configuration information.  Will also find default config in a `Microsoft.TypeScript.Default.props` file, if referenced by the project.\r\n\r\nVisual Studio TypeScript settings are documented on the TypeScript wiki [here](http://www.typescriptlang.org/docs/handbook/compiler-options-in-msbuild.html).\r\n\r\nTested with latest project configuration settings in TypeScript 2.1.4.\r\n\r\n## Install\r\n\r\nTo install, run `npm install csproj2ts`.\r\n\r\nThis module only *collects* the information.  What you do with it after is up to you.\r\n\r\n## Example Usage:\r\n```javascript\r\n\r\n    var csproj2ts = require('csproj2ts');\r\n\r\n    var vsProjInfo = {\r\n        ProjectFileName: \"path/to/my/project.csproj\", // the name and path to the project file\r\n        ActiveConfiguration: \"Release\"                // the MSBuild config to query\r\n    }\r\n\r\n    csproj2ts.getTypeScriptSettings(vsProjInfo).then(function (settings) {\r\n        console.log(settings.files);          // will output the array of files\r\n        console.log(settings.RemoveComments); // will output true or false.\r\n        console.log(settings.OutDir);         // will output the OutDir string or undefined.\r\n        console.log(settings);                // will output all identified configuration.\r\n    });\r\n\r\n```\r\n\r\n## Developing:\r\n\r\nYou must run `npm install` to fetch dependencies prior to developing or testing csproj2ts.\r\n\r\nTo build, run `grunt`.\r\n\r\nTo build and run tests with nodeunit, run `grunt test`.\r\n\r\nTo build, run tests, and launch the demo script, run `grunt demo`.  (You can also run `node demo.js` directly (assumes `csproj2ts.csproj` in current folder).)\r\n\r\n### Quickstart for debugging with Node Inspector\r\n\r\nInstall [Node Inspector](https://github.com/node-inspector/node-inspector) via npm:\r\n\r\n`npm install -g node-inspector`\r\n\r\nExample command-line to debug a particular test (\"test_run_at_all\") on Windows:\r\n\r\n`node-debug --debug-brk \"./node_modules/grunt-contrib-nodeunit/node_modules/nodeunit/bin/nodeunit\" \"tests/tests.js\" -t \"tests_run_at_all\"`\r\n\r\nSet breakpoints in the Chrome dev tools, or use `debugger;` where needed.\r\n\r\n\r\n## API:\r\n\r\nThe main function of csproj2ts, getTypeScriptSettings(), returns a promise.\r\n\r\nIn the then() result of the promise, the returned settings object has the following documented properties:\r\n\r\n  * files: string[] - This is an array of the files that will be compiled.\r\n  * VSProjectDetails - This object has the following properties which correspond to what was passed-in to csproj2ts (not what was found in the project file):\r\n    * ProjectFileName: string\r\n    * MSBuildExtensionsPath32: string\r\n    * VisualStudioVersion: string\r\n    * TypeScriptVersion: string\r\n    * ActiveConfiguration: string\r\n    * ActivePlatform: string\r\n    * DefaultProjectConfiguration?: string;\r\n    * DefaultProjectPlatform?: string;\r\n    * DefaultVisualStudioVersion?: string;\r\n    * TypeScriptDefaultPropsFilePath: string;\r\n    * TypeScriptDefaultConfiguration: - this property has the settings (seen below) that correspond to the defaults on the referenced .props file.\r\n\r\n\r\nThe returned settings object also has the following properties that correspond to the TypeScript configuration settings found in the project file:\r\n\r\n  * AdditionalFlags?: string;\r\n  * AllowSyntheticDefaultImports?: boolean;\r\n  * AllowUnusedLabels?: boolean;\r\n  * AllowUnreachableCode?: boolean;\r\n  * Charset?: string;\r\n  * CodePage?: string;\r\n  * CompileBlocked?: boolean;\r\n  * CompileOnSaveEnabled?: boolean;\r\n  * EmitBOM?: boolean;\r\n  * EmitDecoratorMetadata?: boolean;\r\n  * ExperimentalAsyncFunctions?: boolean;\r\n  * ExperimentalDecorators?: boolean;\r\n  * ForceConsistentCasingInFileNames?: boolean;\r\n  * GeneratesDeclarations?: boolean;\r\n  * InlineSourceMap?: boolean;\r\n  * InlineSources?: boolean;\r\n  * IsolatedModules?: boolean;\r\n  * JSXEmit?: string;\r\n  * MapRoot?: string;\r\n  * ModuleKind?: string;\r\n  * ModuleResolution?: string;\r\n  * NewLine?: string;\r\n  * NoEmitOnError?: boolean;\r\n  * NoEmitHelpers?: boolean;\r\n  * NoFallthroughCasesInSwitch?: boolean;\r\n  * NoImplicitAny?: boolean;\r\n  * NoImplicitUseStrict?: boolean;\r\n  * NoLib?: boolean;\r\n  * NoResolve?: boolean;\r\n  * OutFile?: string;\r\n  * OutDir?: string;\r\n  * PreserveConstEnums?: boolean;\r\n  * PreferredUILang?: string;\r\n  * ReactNamespace?: string;\r\n  * RemoveComments?: boolean;\r\n  * RootDir?: boolean;\r\n  * SkipDefaultLibCheck?: boolean;\r\n  * SourceMap?: boolean;\r\n  * SourceRoot?: string;\r\n  * SuppressImplicitAnyIndexErrors?: boolean;\r\n  * SuppressExcessPropertyErrors?: boolean;\r\n  * Target?: string;\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TypeStrong/csproj2ts.git"
  },
  "scripts": {
    "build": "grunt default",
    "demo": "grunt demo",
    "test": "grunt test"
  },
  "typings": "csproj2ts.d.ts",
  "version": "0.0.8"
}
